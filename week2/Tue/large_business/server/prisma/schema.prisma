// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  products  Product[]
  sales     Sale[]
  customers Customer[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  barcode     String?     @unique
  stock       Int
  minStock    Int         @default(10)
  costPrice   Decimal
  salePrice   Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  stockLogs   StockLog[]
  saleItems   SaleItem[]
}

model Sale {
  id          String     @id @default(uuid())
  totalAmount Decimal
  createdAt   DateTime   @default(now())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  items       SaleItem[]
}

model SaleItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Decimal
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Customer {
  id          String    @id @default(uuid())
  name        String
  phone       String    @unique
  birthday    DateTime?
  points      Int       @default(0)
  visitCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StockLog {
  id        String   @id @default(uuid())
  type      String   // "IN" | "OUT"
  quantity  Int
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
